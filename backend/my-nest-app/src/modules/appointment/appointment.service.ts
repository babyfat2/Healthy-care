import { Injectable } from '@nestjs/common';
import { InjectDataSource, InjectRepository } from '@nestjs/typeorm';
import { PaginationDto } from 'src/common/dto/Pagination.dto';
import { Appointment } from 'src/entities/appointments.entity';
import { PaginationResponse, ResponseData } from 'src/global/globalClass';
import { ESTATUSAPOINTMENT } from 'src/global/globalEnum';
import { HttpStatusCode } from 'src/global/globalMessage';
import { DataSource, Repository } from 'typeorm';
import { AppointmentChangeDto } from './dto/AppointmentChange.dto';
import { Patient } from 'src/entities/patient.entity';
import { PatientGateway } from 'src/socket/patient/patient.gateway';
import { AppointmentListDto } from './dto/AppointmentList.dto';

@Injectable()
export class AppointmentService {

    constructor(
        @InjectRepository(Appointment)
        private readonly appointmentRepository: Repository<Appointment>,
        @InjectRepository(Patient)
        private readonly patientRepository: Repository<Patient>,
        @InjectDataSource()
        private readonly dataSource: DataSource,
        private readonly pateintGateway: PatientGateway,
    ) { }

    // l·∫•y danh s√°ch cu·ªôc hen
    async getListAppointment(query: AppointmentListDto, request: any) {
        let hospital_id = request.hospital_id;


        const where: any = {
            hospital_id: hospital_id,
          };
          
        if (query.status !== undefined) {
            where.status = query.status;
          }

        if (query.time !== undefined) {
            where.appointment_time = query.time;
        }
        const [appointments, total] = await this.appointmentRepository.findAndCount({
            where,
            select: {
                id: true,
                stt: true,
                description: true,
                name: true,
                appointment_time: true,
                phone: true,
            },
            take: query.row,
            skip: (query.page - 1) * query.row,
            order: {
                appointment_time: 'ASC', // s·∫Øp x·∫øp theo ng√†y (n·∫øu c·∫ßn)
            }
        })

        return new PaginationResponse(
            appointments, {
            total: total,
            page: query.page,
            row: query.row,
        }
        )
    }

    // thay ƒë·ªïi tr·∫°ng th√°i cu·ªôc h·∫πn
    async changeAppointment(body: AppointmentChangeDto, request: any) {
        // l·∫•y id b·ªánh vi·ªán
        let hospital_id = request.hospital_id;
        // x√°c ƒë·ªãnh xem cu·ªôc h·∫πn c√≥ ph·∫£i c·ªßa b·ªánh vi·ªán kh√¥ng
        const appointment = await this.appointmentRepository.findOneBy({
            hospital_id: hospital_id,
            id: body.appointment_id,
        })

        // b√°o l·ªói n·∫øu cu·ªôc h·∫πn ko thu·ªôc b·ªánh vi·ªán c·ªßa b·∫°n
        if (!appointment) {
            return new ResponseData(
                null,
                HttpStatusCode.BAD_REQUEST,
                "L·ªãch h·∫πn n√†y kh√¥ng thu·ªôc b·ªánh vi·ªán b·∫°n"
            )
        }

        // thay ƒë·ªïi tr·∫°ng th√°i cu·ªôc h·∫πn
        await this.appointmentRepository.update({
            id: body.appointment_id,
        }, {
            status: body.status,
        })

        // tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
        return new ResponseData(
            null,
            HttpStatusCode.SUCCESS,
            "Thay ƒë·ªïi tr·∫°ng th√°i cu·ªôc h·∫πn th√†nh c√¥ng",
        )
    }


    // l·∫•y chi ti·∫øt cu·ªôc h·∫πn ƒë·ªÉ x·ª≠ l√Ω
    async progressAppointment(request: any, appointment_id: number) {
        // l·∫•y id b·ªánh vi·ªán
        let hospital_id = request.hospital_id;

        const appointment = await this.appointmentRepository.findOneBy({
            id: appointment_id,
            hospital_id: hospital_id,
        })

        if (!appointment) {
            return new ResponseData(
                null,
                HttpStatusCode.NOT_FOUND,
                "Kh√¥ng t√¨m th·∫•y cu·ªôc h·∫πn"
            )
        }

        // G·ªåI SOCKET ·ªü ƒë√¢y üëá
        await this.pateintGateway.inProgressAppointment();

        // c·∫≠p nh·∫≠t trang th√°i cu·ªôc h·∫πn
        await this.appointmentRepository.update({id: appointment_id}, {status: ESTATUSAPOINTMENT.IN_PROGRESS});

        const patient = await this.patientRepository.findOne({
            where: {
                id: appointment.patient_id,
            },
            select: {
                id: true,
                citizen_identification_id: true,
                full_name: true,
                address: true,
                hometown: true,
                birthday: true,
                ethnicity: true,
                issued_date: true,
                issued_place: true,
                phone: true,
            }
        })


        return new ResponseData(
            {appointment: appointment, patient: patient },
            HttpStatusCode.SUCCESS,
            "L·∫•y th√¥ng tin ng∆∞·ªùi b·ªánh th√†nh c√¥ng"
        )
    }
}
