import React, { useEffect, useRef, useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  FlatList,
  Image,
  Alert,
} from 'react-native';
import * as Location from 'expo-location';
import { useLazyGetListHospitalQuery } from '../../redux/api/hospital';
import { IHospital } from '../../type/api';
import { HospitalNavigationProp } from '../../type/navigation';
import useStyles from '../../style/useStyles';
import { createHospitalStyles } from './HospitalStyle';
import { useAppSelector } from '../../redux/hook';

const defaultImage = 'https://cdn-icons-png.flaticon.com/512/888/888064.png';

const Hospital = ({ navigation }: HospitalNavigationProp) => {

  const { styles } = useStyles(createHospitalStyles);

  const [search, setSearch] = useState(''); // tr·∫°ng th√°i trang t√¨m ki·∫øm
  const [sortByDistance, setSortByDistance] = useState(false); // s·∫Øp x·∫øp theo kho·∫£ng c√°ch
  const [trigger] = useLazyGetListHospitalQuery(); // h√†m g·ªçi api
  const [latitude, setLatitude] = useState<number>(); // t·ªça ƒë·ªô
  const [longitude, setLongitude] = useState<number>(); // vƒ© ƒë·ªô
  const [hospitals, setHospitals] = useState<IHospital[]>([]); // d·ªØ li·ªáu b·ªánh vi·ªán
  const [page, setPage] = useState(1); // s·ªë trang hi·ªán t·∫°i
  const [isLoadingMore, setIsLoadingMore] = useState(false); // hi·ªÉn th·ªã giao di·ªán ƒë·ª£i load trang
  const [hasMore, setHasMore] = useState(true); // c√≤n d·ªØ li·ªáu hay ko
  const [isFetchingLocation, setIsFetchingLocation] = useState(false); // vi·ªác l·∫•y v·ªã tr√≠ ƒë√£ xong hay ch∆∞a
  const [query, setQuery] = useState<any>({ 
    page: 1,
    row: 7,
  }); // c√¢u l·ªánh truy v·∫•n
  const isFirstRender = useRef(true);


  useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return
    }
    let dataQuery = { page: 1, row: 7 };
    // th√™m v·ªã tr√≠
    if (longitude && latitude) {
      Object.assign(dataQuery, { "latitude": latitude, "longitude": longitude })
      setSortByDistance(true);
    }

    if (search) {
      Object.assign(dataQuery, { "search": search })
    }
    setPage(1);
    setHasMore(true);
    setQuery(dataQuery);

  }, [longitude, search]);


  useEffect(() => {
    const fetchHospitals = async () => {
      try {
        const res = await trigger(query).unwrap();
        setHospitals(res.data || []);
      } catch (error) {
        console.error('L·ªói fetch:', error);
        setHospitals([]);
      }
    };

    fetchHospitals();
  }, [query]);

  // t√¨m b·ªánh vi·ªán theo ƒë·ªãa ch·ªâ g·∫ßn nh·∫•t
  const getLocation = async () => {
    if (sortByDistance) {
      setSortByDistance(false);
      setLatitude(undefined);
      setLongitude(undefined);
    } else {
      setIsFetchingLocation(true);
      try {
        // Y√™u c·∫ßu quy·ªÅn truy c·∫≠p v·ªã tr√≠
        let { status } = await Location.requestForegroundPermissionsAsync();
        // th√¥ng b√°o n·∫øu b·ªã t·ª´ ch·ªëi
        if (status !== 'granted') {
          Alert.alert('Quy·ªÅn b·ªã t·ª´ ch·ªëi', 'Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ n·∫øu kh√¥ng c√≥ quy·ªÅn!');
          return;
        }

        // L·∫•y v·ªã tr√≠ hi·ªán t·∫°i
        let location = await Location.getCurrentPositionAsync({});

        setLatitude(location.coords.latitude);
        setLongitude(location.coords.longitude);

      } catch (error) {
        Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠');
      }
      setIsFetchingLocation(false);
    }
  };

  // k√©o xu·ªëng ƒë·ªÉ l·∫•y th√™m d·ªØ li·ªáu
  const loadMoreHospitals = async () => {
    if (isLoadingMore || !hasMore) return;

    setIsLoadingMore(true);
    const result = await trigger({ ...query, page: page + 1 }).unwrap();
    const newData = result.data || [];

    if (newData.length === 0) {
      setHasMore(false); // Kh√¥ng c√≤n d·ªØ li·ªáu n·ªØa
    } else {
      setHospitals(prev => [...prev, ...newData]);
      setPage(prev => prev + 1);
    }

    setIsLoadingMore(false);
  };

  const renderFooter = () => {
    if (isLoadingMore) {
      return (
        <View style={{ padding: 16, alignItems: 'center' }}>
          <Text>ƒêang t·∫£i th√™m...</Text>
        </View>
      );
    }

    if (!hasMore) {
      return (
        <View style={{ padding: 16, alignItems: 'center' }}>
          <Text>ƒê√£ t·∫£i h·∫øt danh s√°ch.</Text>
        </View>
      );
    }

    return null;
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Danh s√°ch b·ªánh vi·ªán</Text>

      {/* Thanh t√¨m ki·∫øm v√† n√∫t g·ªçn */}
      <View style={styles.searchRow}>
        <TextInput
          style={styles.searchInput}
          placeholder="T√¨m ki·∫øm b·ªánh vi·ªán..."
          placeholderTextColor="#9CA3AF"
          value={search}
          onChangeText={setSearch}
        />
        <TouchableOpacity
          style={[
            styles.sortCompactButton,
            sortByDistance && styles.sortCompactButtonActive,
          ]}
          onPress={getLocation}
          disabled={isFetchingLocation}
        >
          <Text
            style={[
              styles.sortCompactText,
              sortByDistance && styles.sortCompactTextActive,
            ]}
          >
            {isFetchingLocation ? 'ƒêang l·∫•y v·ªã tr√≠...' : 'üè• G·∫ßn nh·∫•t'}
          </Text>

        </TouchableOpacity>
      </View>

      <FlatList
        data={hospitals}
        keyExtractor={(_, index) => index.toString()}
        showsVerticalScrollIndicator={false}
        renderItem={({ item }) => (
          <TouchableOpacity
            style={styles.card}
            onPress={() => navigation.navigate("HospitalDetail", { hospital_id: item.id })}
          >
            <Image
              source={{ uri: item.hospitalImage ? item.hospitalImage[0].image_uri : defaultImage }}
              style={styles.image}
            />
            <View style={styles.infoContainer}>
              <Text style={styles.hospitalName}>{item.name}</Text>
              <Text style={styles.hospitalAddress}>{item.address}</Text>
              {sortByDistance && (
                <Text style={styles.hospitalDistance}>
                  üìç {item.distance} km
                </Text>
              )}
            </View>
          </TouchableOpacity>
        )}
        onEndReached={loadMoreHospitals}
        onEndReachedThreshold={0.9}
        ListFooterComponent={renderFooter}
      />
    </View>
  );
};

export default Hospital;